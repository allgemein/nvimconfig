[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'sudar/vim-arduino-syntax'

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
let g:indent_guides_enable_on_vim_startup = 1
'''

[[plugins]]
repo = 'simeji/winresizer'

[[plugins]]
repo = 'luochen1990/rainbow'
hook_add = '''
let g:rainbow_active = 0
'''

[[plugins]]
repo = 'nanotech/jellybeans.vim'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'plasticboy/vim-markdown'

[[plugins]]
repo = 'previm/previm'
hook_add = '''
autocmd BufRead,BufNewFile *.md  set filetype=markdown
nnoremap <silent> <C-p> :PrevimOpen<CR>
let g:vim_markdown_folding_disabled=1
let g:previm_enable_realtime=1
'''

[[plugins]]
repo = 'tyru/open-browser.vim'

[[plugins]]
repo = 'tyru/caw.vim'

[[plugins]]
repo = 'Shougo/defx.nvim'
hook_add = '''
call defx#custom#column('icon', {
    \ 'directory_icon': '▸',
    \ 'opened_icon': '▾',
    \ 'root_icon': ' ',
    \ })

call defx#custom#column('filename', {
    \ 'min_width': 30,
    \ 'max_width': 30,
    \ })

call defx#custom#column('mark', {
    \ 'readonly_icon': '✗',
    \ 'selected_icon': '✓',
    \ })

call defx#custom#option('_', {
    \ 'columns': 'indent:git:icons:filename',
    \ 'show_ignored_files': 1,
    \ 'toggle':1,
    \ })

autocmd FileType defx call s:defx_my_settings()
function! s:defx_my_settings() abort
" Define mappings
nnoremap <silent><buffer><expr> <CR> defx#do_action('drop')
nnoremap <silent><buffer><expr> c defx#do_action('copy')
nnoremap <silent><buffer><expr> m defx#do_action('move')
nnoremap <silent><buffer><expr> p defx#do_action('paste')
nnoremap <silent><buffer><expr> l defx#do_action('open')
nnoremap <silent><buffer><expr> E defx#do_action('open', 'vsplit')
nnoremap <silent><buffer><expr> P defx#do_action('open', 'pedit')
nnoremap <silent><buffer><expr> o defx#do_action('open_or_close_tree')
nnoremap <silent><buffer><expr> K defx#do_action('new_directory')
nnoremap <silent><buffer><expr> N defx#do_action('new_file')
nnoremap <silent><buffer><expr> M defx#do_action('new_multiple_files')
nnoremap <silent><buffer><expr> C defx#do_action('toggle_columns', 'mark:indent:icon:filename:type:size:time')
nnoremap <silent><buffer><expr> S defx#do_action('toggle_sort', 'time')
nnoremap <silent><buffer><expr> d defx#do_action('remove')
nnoremap <silent><buffer><expr> r defx#do_action('rename')
nnoremap <silent><buffer><expr> ! defx#do_action('execute_command')
nnoremap <silent><buffer><expr> x defx#do_action('execute_system')
nnoremap <silent><buffer><expr> yy defx#do_action('yank_path')
nnoremap <silent><buffer><expr> . defx#do_action('toggle_ignored_files')
nnoremap <silent><buffer><expr> ; defx#do_action('repeat')
nnoremap <silent><buffer><expr> h defx#do_action('cd', ['..'])
nnoremap <silent><buffer><expr> ~ defx#do_action('cd')
nnoremap <silent><buffer><expr> q defx#do_action('quit')
nnoremap <silent><buffer><expr> <Space> defx#do_action('toggle_select') . 'j'
nnoremap <silent><buffer><expr> * defx#do_action('toggle_select_all')
nnoremap <silent><buffer><expr> j line('.') == line('$') ? 'gg' : 'j'
nnoremap <silent><buffer><expr> k line('.') == 1 ? 'G' : 'k'
nnoremap <silent><buffer><expr> <C-l> defx#do_action('redraw')
nnoremap <silent><buffer><expr> <C-g> defx#do_action('print')
nnoremap <silent><buffer><expr> cd defx#do_action('change_vim_cwd')
nnoremap <silent><buffer><expr> t defx#do_action('open','tabnew')
endfunction
'''

[[plugins]]
repo='dense-analysis/ale'
hook_add = '''
let g:ale_linters = {
\  'python': ['flake8'],
\  'javascript': ['eslint']
\}

let g:ale_fixers = {
\  'python': ['autopep8', 'black', 'isort'],
\  'javascript': ['eslint'],
\  'html': ['prettier'],
\  'css': ['prettier']
\}
let g:ale_fix_on_save = 1

let g:ale_python_flake8_executable = g:python3_host_prog
let g:ale_python_flake8_options = '-m flake8'
let g:ale_python_autopep8_executable = g:python3_host_prog
let g:ale_python_autopep8_options = '-m autopep8'
let g:ale_python_isort_executable = g:python3_host_prog
let g:ale_python_isort_options = '-m isort'
let g:ale_python_black_executable = g:python3_host_prog
let g:ale_python_black_options = '-m black'

nmap <silent> <Leader>x <Plug>(ale_fix)
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
let g:lightline = {
\  'colorscheme': 'jellybeans',
\  'active': {
\    'left': [ [ 'mode', 'paste' ],
\    [ 'readonly', 'filename', 'modified' ],
\    [ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok' ]
\    ],},
\}
set laststatus=2
set noshowmode
'''

[[plugins]]
repo = 'maximbaz/lightline-ale'
depends = ['lightline.vim', 'ale']
hook_add = '''
let g:lightline.component_expand = {
\  'linter_checking': 'lightline#ale#checking',
\  'linter_warnings': 'lightline#ale#warnings',
\  'linter_errors': 'lightline#ale#errors',
\  'linter_ok': 'lightline#ale#ok'
\}
let g:lightline.component_type = {
\  'linter_checking': 'left',
\  'linter_warnings': 'warning',
\  'linter_errors': 'error',
\  'linter_ok': 'left'
\}
'''

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'shougo/neosnippet'
hook_add = '''
let g:neosnippet#snippets_directory='~/.config/vim-snippets/snippets'
'''
[[plugins]]
repo = 'shougo/neosnippet-snippets'


[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'Shougo/vimproc'
build = 'make'

[[plugins]]
repo = 'jiangmiao/auto-pairs'

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'tpope/vim-fugitive'


[[plugins]]
repo = 'prabirshrestha/async.vim'
hook_add = '''
let g:asyncomplete_auto_popup = 1
let g:asyncomplete_auto_completeopt = 0
let g:asyncomplete_popup_delay = 200
'''

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_add = '''
let g:lsp_highlights_enabled = 1
let g:lsp_textprop_enabled = 1
let g:lsp_diagnostics_enabled = 0
let g:lsp_diagnostics_echo_cursor = 1
let g:lsp_text_edit_enabled = 1
'''

[[plugins]]
repo = 'shougo/deoplete.nvim'
hook_add = '''
let g:deoplete#enable_at_startup = 1
'''

[[plugins]]
repo = 'lighttiger2505/deoplete-vim-lsp'

[[plugins]]
repo = 'hrsh7th/vim-vsnip'

[[plugins]]
repo = 'hrsh7th/vim-vsnip-integ'

[[plugins]]
repo = 'lervag/vimtex'

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
let g:quickrun_config={
\  '_' :{
\    'runner' : 'vimproc',
\    'runnner/vimproc/updatetime' : 60,
\    'outputter/buffer/split' : ':botright',
\    'outputter/buffer/close_on_empty' : 1,
\    },
\  'cpp/g++' : {
\    'input' : '@',
\    'cmdopt' : '-Wall',
\    'hook/time/enable' :1,},
\}
'''

[[plugins]]
repo = 'mattn/vim-lsp-settings'
merged = 0
depends = ['prabirshrestha/async.vim','prabirshrestha/vim-lsp','Shougo/deoplete.nvim','lighttiger2505/deoplete-vim-lsp']
